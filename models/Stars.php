<?phpclass Stars{    /**     * Get all stars from Db     *     * @param null $db     * @return mixed     */    public static function getAllStars($db)    {        $stars = $db->query('SELECT * FROM stars')->fetchAll();        return $stars;    }    /**     * Get stars where book_id = id in table books     *     * @param $db     * @param $id     * @return mixed     */    public static function getStarsByBookId($db, $id)    {        $stars = $db->query('SELECT * FROM stars Where books_id =' . $id)            ->fetchAll(PDO::FETCH_ASSOC);        return $stars;    }    /**     * Create stars for new Book     *     * @param $bookId     * @param null $stars     * @return bool     */    public static function createStars($bookId, $stars = null)    {        $db = Db::getConnection();        if (isset($bookId) && !empty($stars)) {            foreach ($stars as $item) {                self::saveStar($db, $bookId, $item);            }        } else {            self::saveStar($db, $bookId, $_POST);        }        Db::closeDbConnection($db);        return false;    }    /**     * Save all stars to db     *     * @param $db     * @param $bookId     * @param null $item     * @return bool     */    public static function saveStar($db, $bookId, $item)    {        $insertQuery = "INSERT INTO stars (books_id, first_name, last_name) VALUES             ({$bookId}, '{$item['stars_first']}', '{$item['stars_last']}');";        $db->exec($insertQuery);        return true;    }    /**     * Delete stars book_id = id in table books     *     * @param $db     * @param $id     * @return mixed     */    public static function deleteStars($db, $id)    {        $queryDeleteStars = 'DELETE FROM stars WHERE books_id = :id';        $delete = $db->prepare($queryDeleteStars);        $delete->bindParam(':id', $id, PDO::PARAM_INT);        $delete->execute();        return true;    }}