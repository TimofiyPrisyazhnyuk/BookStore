<?phpclass MigrationController{    /**     * @var string     */    protected $steeringTableName = 'steering';    /**     * @var string     */    protected $brakeTableName = 'brake';    /**     * @var string     */    protected $gpsTableName = 'gps';    /**     * @var string     */    protected $informationTableName = 'information';    /**     * @var null|object     */    protected $dbConnection;    /**     * Create all tables if it dont exist.     *     * @return bool     */    public function actionUp()    {        try {            $db = Db::getConnection();            //Error Handling            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);            if (is_object($db)) {                $this->dbConnection = $db;                // Create tables for current system.                $this->createSteeringTable();                $this->createBrakeTable();                $this->createGpsTable();                $this->createInformationTable();                // close db connection.                $this->dbConnection = Db::closeDbConnection($db);            }        } catch (\Exception $e) {            echo 'Failed generate all tables - ' . $e->getMessage() . "\n";        }        echo 'Generate table done!';        return true;    }    /**     *  Delete created tables in DB.     *     * @return bool     */    public function actionDown()    {        try {            $db = Db::getConnection();            //Error Handling            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);            if (is_object($db)) {                $this->dbConnection = $db;                // Remove tables for current system.                $this->removeSteeringTable();                $this->removeBrakeTable();                $this->removeGpsTable();                $this->removeInformationTable();            }            $this->dbConnection = Db::closeDbConnection($db);        } catch (\Exception $e) {            echo 'Failed remove all tables - ' . $e->getMessage() . "\n";        }        echo 'Removing tables done!';        return true;    }    /**     * Create table in DB Steering.     *     * @return bool     */    public function createSteeringTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->steeringTableName);            if ($checkIfExistTable) {                $sqlQuery = "CREATE TABLE IF NOT EXISTS $this->steeringTableName(                    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,                    name VARCHAR(255),                    type VARCHAR(255) NOT NULL,                    value VARCHAR(255) NOT NULL,                    priority INT(6) NOT NULL               )";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Create break table.     *     * @return bool     */    public function createBrakeTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->brakeTableName);            if ($checkIfExistTable) {                $sqlQuery = "CREATE TABLE IF NOT EXISTS $this->brakeTableName(                    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,                    name VARCHAR(255),                    type VARCHAR(255) NOT NULL,                    top_left_value VARCHAR(255) NOT NULL,                    top_right_value VARCHAR(255) NOT NULL,                    bot_left_value VARCHAR(255) NOT NULL,                    bot_right_value VARCHAR(255) NOT NULL,                    priority INT(6) NOT NULL               )";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Create Gps table.     *     * @return bool     */    public function createGpsTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->gpsTableName);            if ($checkIfExistTable) {                $sqlQuery = "CREATE TABLE IF NOT EXISTS $this->gpsTableName(                    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,                    name VARCHAR(255),                    type VARCHAR(255) NOT NULL,                    value VARCHAR(255) NOT NULL,                    status_road VARCHAR(255) NOT NULL,                    check_if_ok VARCHAR(255) NOT NULL,                    priority INT(6) NOT NULL               )";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Create Gps table.     *     * @return bool     */    public function createInformationTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->informationTableName);            if ($checkIfExistTable) {                $sqlQuery = "CREATE TABLE IF NOT EXISTS $this->informationTableName(                    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,                    name VARCHAR(255),                    type VARCHAR(255) NOT NULL,                    value VARCHAR(255) NOT NULL,                    for_system VARCHAR(255) NOT NULL,                    check_name VARCHAR(255) NOT NULL,                    check_status VARCHAR(255) NOT NULL,                    priority INT(6) NOT NULL               )";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Remove table for Steering system.     *     * @return bool     */    public function removeSteeringTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->steeringTableName);            if ($checkIfExistTable) {                $sqlQuery = "DROP TABLE IF EXISTS $this->steeringTableName;)";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Remove table for Brake system.     *     * @return bool     */    public function removeBrakeTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->brakeTableName);            if ($checkIfExistTable) {                $sqlQuery = "DROP TABLE IF EXISTS $this->brakeTableName;)";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Remove table for Gps system.     *     * @return bool     */    public function removeGpsTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->gpsTableName);            if ($checkIfExistTable) {                $sqlQuery = "DROP TABLE IF EXISTS $this->gpsTableName;)";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Remove table for Gps system.     *     * @return bool     */    public function removeInformationTable()    {        $db = $this->dbConnection;        if ($db !== null) {            $checkIfExistTable = $this->checkIfExistTable($db, $this->informationTableName);            if ($checkIfExistTable) {                $sqlQuery = "DROP TABLE IF EXISTS $this->informationTableName;)";                $query = $db->prepare($sqlQuery);                $result = $query->execute();                if (!empty($result)) {                    return true;                }            }        }        return false;    }    /**     * Check if exist table in DB;     *     * @param object $db     * @param string $tableName     * @return bool     */    public function checkIfExistTable($db, $tableName)    {        $sqlQuery = "SHOW TABLES LIKE :tableName;";        $result = $db->prepare($sqlQuery);        $result->bindParam(':tableName', $tableName, PDO::PARAM_STR);        $result->execute();        if (!empty($result)) {            return true;        }        return false;    }}